#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <pthread.h>
#include <errno.h>
#include <stdbool.h>
#include <sys/time.h>

int uart_fd = -1;

// MODBUS CRC16 계산 함수
uint16_t CRC16_MODBUS(const uint8_t *data, uint16_t length) {
    uint16_t crc = 0xFFFF;
    for (uint16_t i = 0; i < length; i++) {
        crc ^= (uint16_t)data[i];
        for (uint8_t j = 0; j < 8; j++) {
            if (crc & 0x0001) {
                crc = (crc >> 1) ^ 0xA001;
            } else {
                crc >>= 1;
            }
        }
    }
    return crc;
}

// 지정된 밀리초 동안 대기하는 함수
void wait_for_milliseconds(long wait_ms) {
    struct timeval start, current;
    long elapsed_ms = 0;

    // 시작 시간 기록
    gettimeofday(&start, NULL);

    // 지정된 시간이 경과할 때까지 반복
    while (elapsed_ms < wait_ms) {
        gettimeofday(&current, NULL);
        
        // 경과 시간 계산 (밀리초 단위)
        elapsed_ms = (current.tv_sec - start.tv_sec) * 1000 +
                     (current.tv_usec - start.tv_usec) / 1000;
        
        usleep(100);
    }
}


// UART 초기화 함수
int init_uart(const char *port) {
    uart_fd = open(port, O_RDWR | O_NOCTTY | O_NDELAY);
    if (uart_fd < 0) {
        printf("UART 열기 실패: %s\n", strerror(errno));
        return -1;
    }

    struct termios options;
    tcgetattr(uart_fd, &options);
    
    // 115200bps
    cfsetispeed(&options, B115200);
    cfsetospeed(&options, B115200);
    
    options.c_cflag = (options.c_cflag & ~CSIZE) | CS8;     // 8비트 
    options.c_cflag &= ~PARENB;                             // 패리티 없음
    options.c_cflag &= ~CSTOPB;                             // 1 스톱 비트
    options.c_cflag |= CLOCAL | CREAD;                      // 로컬 연결, 수신 활성화
    options.c_iflag = 0;
    options.c_oflag = 0;
    options.c_lflag = 0;
    
    tcflush(uart_fd, TCIFLUSH);
    if (tcsetattr(uart_fd, TCSANOW, &options) != 0) {
        printf("UART 설정 실패\n");
        close(uart_fd);
        return -1;
    }
    
    return 0;
}

//파싱
int parseBaudRateResponse(uint8_t device_addr, uint8_t* response, int bytes_read, bool debug_print) {
    if (bytes_read < 5 || response[0] != device_addr || response[1] != 0x03) {
        if (debug_print) printf("잘못된 응답 형식 또는 장치 주소 불일치\n");
        return -1;
    }

    uint8_t byte_count = response[2];
    
    if (bytes_read < 3 + byte_count + 2) {
        if (debug_print) printf("응답이 너무 짧음\n");
        return -1;
    }

    // 보드레이트 값 추출
    uint16_t value = (response[3] << 8) | response[4];

    // 보드레이트 값 해석 및 출력
    switch (value) {
        case 0x0000:
            printf("보드레이트: 1200\n");
            break;
        case 0x0001:
            printf("보드레이트: 2400\n");
            break;
        case 0x0002:
            printf("보드레이트: 4800\n");
            break;
        case 0x0003:
            printf("보드레이트: 9600\n");
            break;
        case 0x0004:
            printf("보드레이트: 19200\n");
            break;
        case 0x0006:
            printf("보드레이트: 57600\n");
            break;
        case 0x0007:
            printf("보드레이트: 115200\n");
            break;
        default:
            printf("알 수 없는 보드레이트 값: 0x%04X\n", value);
            break;
    }

    // CRC 검증 수행
    uint16_t received_crc = (response[3 + byte_count + 1] << 8) | response[3 + byte_count];
    uint16_t calculated_crc = CRC16_MODBUS(response, 3 + byte_count);

    if (received_crc == calculated_crc) {
        if (debug_print) printf("CRC 검증 성공\n");
    } else {
        printf("CRC 검증 실패 (계산된 값: 0x%04X, 받은 값: 0x%04X)\n",
               calculated_crc, received_crc);
        return -1;
    }

    return value; // 보드레이트 값 반환
}

// UART를 통해 장치에서 보드레이트(baud rate) 값을 읽는 함수
int readBaudRate(uint8_t device_addr, bool debug_print, uint8_t* response, int* bytes_read) {
    if (uart_fd < 0 || device_addr > 0x7F) {
        if (debug_print) printf("잘못된 매개변수 또는 UART가 초기화되지 않음\n");
        return -1;
    }

    // 명령 전송 시작 시간 기록
    struct timeval tx_start_time;
    gettimeofday(&tx_start_time, NULL);

    // 보드레이트 읽기 명령 구성
    uint8_t cmd[8];
    cmd[0] = device_addr;      // 장치 주소
    cmd[1] = 0x03;            // 기능 코드: 읽기(Read)
    cmd[2] = 0x00;            // 레지스터 주소 상위 바이트
    cmd[3] = 0xFE;            // 레지스터 주소 하위 바이트 (0x00FE)
    cmd[4] = 0x00;            // 레지스터 개수 상위 바이트
    cmd[5] = 0x01;            // 레지스터 개수 하위 바이트 (1개 레지스터)

    // CRC 계산
    uint16_t crc = CRC16_MODBUS(cmd, 6);
    cmd[6] = crc & 0xFF;       // CRC 하위 바이트
    cmd[7] = (crc >> 8) & 0xFF; // CRC 상위 바이트

    if (debug_print) {
        printf("보드레이트 읽기 명령 전송: ");
        for (int i = 0; i < 8; i++) {
            printf("0x%02X ", cmd[i]);
        }
        printf("\n");
    }

    // 명령 전송
    int result = write(uart_fd, cmd, 8);
    if (result != 8) {
        if (debug_print) printf("명령 전송 실패\n");
        return -1;
    }

    // 명령 전송 완료 시간 기록
    struct timeval tx_end_time;
    gettimeofday(&tx_end_time, NULL);

    // 응답 수신 시작 시간 기록
    struct timeval rx_start_time;
    gettimeofday(&rx_start_time, NULL);

    // 응답 수신
    *bytes_read = read(uart_fd, response, 32); // 버퍼 크기: 32바이트

    // 응답 수신 완료 시간 기록
    struct timeval rx_end_time;
    gettimeofday(&rx_end_time, NULL);

    if (*bytes_read < 0) {
        if (debug_print) printf("응답 읽기 실패\n");
        return -1;
    }

    // 응답이 없는 경우 최대 5회 재시도
    int retry_count = 0;
    while (*bytes_read == 0 && retry_count < 5) {
        wait_for_milliseconds(50);  // 50ms 대기 후 재시도
        *bytes_read = read(uart_fd, response, 32);
        retry_count++;

        if (debug_print && *bytes_read == 0) {
            printf("응답 없음, 재시도 %d/5\n", retry_count);
        }
    }

    if (*bytes_read == 0) {
        if (debug_print) printf("응답 없음, 시간 초과\n");
        return -1;
    }

    if (debug_print) {
        printf("수신된 데이터 (%d 바이트): ", *bytes_read);
        for (int i = 0; i < *bytes_read; i++) {
            printf("0x%02X ", response[i]);
        }
        printf("\n");
    }

    return 0; // 성공
}

// 스레드 함수
void* baudrate_thread(void* arg) {
    uint8_t device_addr = *(uint8_t*)arg;
    bool debug_print = true;

    while (1) {
        printf("\n===== 보드레이트 읽기 요청 시작 =====\n");
        int result = readBaudRate(device_addr, debug_print);
        
        if (result < 0) {
            printf("데이터 읽기 실패\n");
        }
        
        printf("===== 보드레이트 읽기 요청 완료 =====\n\n");
        wait_for_milliseconds(2000);  // 2초마다 읽기 (sleep 대신 wait_for_milliseconds 사용)
    }
    
    return NULL;
}

int main() {
    printf("MODBUS 통신 프로그램 시작\n");
    
    // UART 초기화
    if (init_uart("/dev/ttyUSB0") < 0) {  
        return -1;
    }
    
    printf("UART 초기화 성공\n");
    wait_for_milliseconds(1000);  // 1초 대기 (장치 안정화 시간)

    // CAROBO8 장치 주소 (기본값으로 1 사용, 필요시 수정)
    uint8_t device_addr = 1;

    // 스레드 생성
    pthread_t thread_id;
    if (pthread_create(&thread_id, NULL, baudrate_thread, &device_addr) != 0) {
        printf("스레드 생성 실패\n");
        close(uart_fd);
        return -1;
    }

    printf("보드레이트 읽기 스레드 시작됨\n");

    // 메인 스레드가 종료되지 않도록 유지
    pthread_join(thread_id, NULL);

    // UART 닫기 (정상적으로 도달하지 않음)
    close(uart_fd);
    return 0;
}
