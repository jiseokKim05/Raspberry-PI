#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <pthread.h>
#include <errno.h>
#include <stdbool.h>

int uart_fd = -1;

uint16_t CRC16_MODBUS(const uint8_t *data, uint16_t length) 
{
    uint16_t crc = 0xFFFF;
    for (uint16_t i = 0; i < length; i++) 
    {
        crc ^= (uint16_t)data[i];
        for (uint8_t j = 0; j < 8; j++) 
        {
            if (crc & 0x0001) 
            {
                crc = (crc >> 1) ^ 0xA001;
            } 
            else 
            {
                crc >>= 1;
            }
        }
    }
    return crc;
}

int init_uart(const char *port) 
{
    uart_fd = open(port, O_RDWR | O_NOCTTY | O_NDELAY);
    if (uart_fd < 0) 
    {
        printf("failed UART open: %s\n", strerror(errno));
        return -1;
    }

    struct termios options;
    tcgetattr(uart_fd, &options);
    
    cfsetispeed(&options, B9600);
    cfsetospeed(&options, B9600);
    
    options.c_cflag = (options.c_cflag & ~CSIZE) | CS8;    
    options.c_cflag &= ~PARENB;                             
    options.c_cflag &= ~CSTOPB;                            
    options.c_cflag |= CLOCAL | CREAD;                      
    options.c_iflag = 0;
    options.c_oflag = 0;
    options.c_lflag = 0;
    
    tcflush(uart_fd, TCIFLUSH);
    if (tcsetattr(uart_fd, TCSANOW, &options) != 0) 
    {
        printf("failed UART setting\n");
        close(uart_fd);
        return -1;
    }
    
    return 0;
}

int readBaudRate(uint8_t device_addr, bool debug_print) 
{
    if (uart_fd < 0 || device_addr > 0x7F) 
    {
        if (debug_print) printf("잘못된 매개변수 또는 UART가 초기화되지 않음\n");
        return -1;
    }

    uint8_t cmd[8];
    cmd[0] = device_addr;      
    cmd[1] = 0x03;            
    cmd[2] = 0x00;            
    cmd[3] = 0xFE;           
    cmd[4] = 0x00;           
    cmd[5] = 0x01;            
    
    uint16_t crc = CRC16_MODBUS(cmd, 6);
    cmd[6] = crc & 0xFF;       
    cmd[7] = (crc >> 8) & 0xFF; 

    if (debug_print)
    {
        printf("Sending command to read baud rate: ");
        for (int i = 0; i < 8; i++) 
        {
            printf(" 0x%02X  ", cmd[i]);
        }
        printf("\n");
    }

    int result = write(uart_fd, cmd, 8);
    if (result != 8)
    {
        if (debug_print) printf("Failed to send command\n");
        return -1;
    }

    uint8_t response[32];  
    usleep(100000);       
    
    int bytes_read = read(uart_fd, response, sizeof(response));
    if (bytes_read < 0) 
    {
        if (debug_print) printf("Failed to read\n");
        return -1;
    }

    printf("read data: ");
    for (int i = 0; i < bytes_read; i++) 
    {
        printf("0x%02X ", response[i]);
    }
    printf("\n");

    return 0;  
}

int controlRelayLED(uint8_t device_addr, bool state, bool debug_print, int i) 
{
    if (uart_fd < 0 || device_addr > 0x7F) 
    {
        if (debug_print) printf("잘못된 매개변수 또는 UART가 초기화되지 않음\n");
        return -1;
    }

    uint8_t cmd[8];
    cmd[0] = device_addr;      
    cmd[1] = 0x05;            
    cmd[2] = 0x09;            
    cmd[3] = 0x10 + i;        // 0x10 ~ 0x18 범위
    cmd[4] = state ? 0xFF : 0x00;  
    cmd[5] = 0x00;            

    uint16_t crc = CRC16_MODBUS(cmd, 6);
    cmd[6] = crc & 0xFF;       
    cmd[7] = (crc >> 8) & 0xFF; 

    if (debug_print)
    {
        printf("Sending relay %s command to address 0x%02X: ", 
               state ? "ON" : "OFF", 0x10 + i);
        for (int i = 0; i < 8; i++) 
        {
            printf(" 0x%02X ", cmd[i]);
        }
        printf("\n");
    }

    int result = write(uart_fd, cmd, 8);
    if (result != 8)
    {
        if (debug_print) printf("Failed to send relay command\n");
        return -1;
    }

    usleep(100000); 
    return 0;
}

void* baudrate_thread(void* arg) 
{
    uint8_t device_addr = *(uint8_t*)arg;
    bool debug_print = true;

    while (1) 
    {
        int result = readBaudRate(device_addr, debug_print);
        
        if (result < 0) 
        {
            printf("Baudrate read 실패\n");
        }
        
        sleep(2);
    }
    
    return NULL;
}

void* led_blink_thread(void* arg) 
{
    uint8_t device_addr = *(uint8_t*)arg;
    bool debug_print = true;

    while (1) 
    {
        // 0x10부터 0x18까지 순차적으로 제어
        for (int i = 0; i <= 8; i++) // 0x10 ~ 0x18 (9개)
        {
            // LED ON
            int result = controlRelayLED(device_addr, true, debug_print, i);
            if (result < 0) 
            {
                printf("LED 제어 실패\n");
            }
            sleep(1);  // 1초 대기

            // LED OFF
            result = controlRelayLED(device_addr, false, debug_print, i);
            if (result < 0) 
            {
                printf("LED 제어 실패\n");
            }
            sleep(1);  // 1초 대기
        }
    }
    
    return NULL;
}

int main() 
{
    if (init_uart("/dev/ttyUSB0") < 0) 
    {  
        return -1;
    }

    uint8_t device_addr = 1;
    pthread_t baud_thread_id, led_thread_id;

    pthread_create(&baud_thread_id, NULL, baudrate_thread, &device_addr);
    pthread_create(&led_thread_id, NULL, led_blink_thread, &device_addr);

    pthread_join(baud_thread_id, NULL);
    pthread_join(led_thread_id, NULL);

    close(uart_fd);
    return 0;
}
